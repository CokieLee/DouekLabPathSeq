configfile: "config.yaml"

# get samples list from input files directory
sample_names = []

rule all:
    input:
        os.path.join(config["outputpath"], "{sample}.txt")  # Use wildcard directly

rule read_sample_list:
    input:
        os.path.join(config["inputpath"], "file_list")
    output:
        # no file output
    run:
        with open(input[0], "r") as file:
            sample_names.extend(line.strip() for line in file)

rule print_sample:
    input:
        os.path.join(config["inputpath"], "file_list") 
    output:
        os.path.join(config["outputpath"], "{sample}.txt")  
    shell:
        "echo {wildcards.sample} > {output}"

# the final output is the sample directories
# rule all:
#     input:
#         expand(os.path.join(configfile["outputpath"], "{sample}"), sample=sample_names)

# # run bowtie unmasked on samples
# rule bowtieUnmasked:
#     input:
#         scriptPath=os.path.join(configfile["codepath"], "bowtieUnmaskedGenome.sh"),
#         projectID=configfile["projectid"],
#         leftReadFile={sample},
#         rightReadFile={sample}.replace("R1", "R2"),
#         origin="RNA",
#         minContigLegnth=300,
#         outputPath=configfile["outputpath"]
#     output:
#         directory(os.path.join(configfile["outputpath"], {sample}, "Generated_Data_1st_Bowtie_Alignment_ERCC")),
#         directory(os.path.join(configfile["outputpath"], {sample}, "Generated_Data_2nd_Bowtie_Alignment_Unmasked_Genome")),
#         directory(os.path.join(configfile["outputpath"], {sample}, "unmasked_genome_alignment_rates")),
#         directory(os.path.join(configfile["outputpath"], {sample}, "ERCC_alignment_rates")),
#         directory(os.path.join(configfile["outputpath"], {sample}, "ERCC_alignment_counts")),
#         directory(os.path.join(configfile["outputpath"], {sample}, "insert_size_metrics"))
#     conda:
#         "./environment.yaml"
#     shell:
#         "{input.scriptPath} {input.projectID} {input.leftReadFile} \
#         {input.rightReadFile} {basename} {input.outputPath} \
#         {codepath} {ercc} {unmaskedindex} {picardpath}"