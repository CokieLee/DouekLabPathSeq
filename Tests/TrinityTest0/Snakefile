configfile: "config.yaml"

rule all:
    input:
        os.path.join(config["outputpath"],
		"formatted_myTrinity_Origin_" + config["origin"] + ".Trinity.fasta")

# Basic rule for testing environment. Should take all input files,
# and print them each to a file of the same base name.
rule testRuleAll:
    input:
        expand(os.path.join(config["outputpath"], "{sample}.txt"), sample=FULLSAMPLES)

rule testRuleHelper:
    params:
        "this file corresponds to {sample}"
    output:
        os.path.join(config["outputpath"], "{sample}.txt")
    shell:
        """
        echo {params} > {output}
       """

## assembly remaining unaligned reads into contigs
rule trinity:
    input:
        scriptPath=os.path.join(config["codepath"], "all_trinity.sh"),
        leftInput="/home/parkercol/PathSeq/Tests/BiowulfTest3/Input/unalignedRead1AgainstPrimate_582760806_A5_S33_R1_001_short_test.fq",
        rightInput="/home/parkercol/PathSeq/Tests/BiowulfTest3/Input/unalignedRead1AgainstPrimate_582760806_A5_S33_R2_001_short_test.fq"
    params:
        outPath=os.path.join(config["outputpath"], "Sample_{sample}" + leftEnding),
        codePath=config["codepath"],
        sampleNameLeft="582760806_A5_S33_R1_001_short_test",
        sampleNameRight="582760806_A5_S33_R2_001_short_test",
        origin=config["origin"],
        minContigLen=config["minContigLen"],
        numThreads="1",
        maxMemory="175G",
        fastp=config["program_fastp"],
        scratchDir=config["scratchDir"]
    output:
        ## following outputs are directly used by subsequent steps
        # os.path.join(config["outputpath"], "Sample_{sample}" + leftEnding,
        #             config["origin"] + "_trinity_output",
        #             "formatted_myTrinity_Origin_" + config["origin"] + ".Trinity.fasta"),
        ## following outputs are solely informational
        os.path.join(config["outputpath"],
                    "trinity_out_" + str(config["minContigLen"]) + "_Sample_{sample}" + leftEnding + ".txt"),
        os.path.join(config["outputpath"],
                    "trinity_err_" + str(config["minContigLen"]) + ".txt"),
        ## following outputs are intermediate outputs
        os.path.join(config["outputpath"],
                    "myTrinity_Origin_"+ config["origin"] + ".Trinity.fasta")
    shell: ## does this really need py-setuptools? what even is that
        """
        module load trinity/2.13.2
        which Trinity
        module load fastp
        which fastp
        module load fastxtoolkit
        which fasta_formatter

        bash {input.scriptPath} {params.codePath} {input.leftInput} {input.rightInput} {params.sampleNameLeft} \
        {params.sampleNameRight} {params.origin} {params.minContigLen} {params.numThreads} \
        {params.maxMemory} {params.outPath} {params.scratchDir}
        """